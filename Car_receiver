// This code is for ESP32 Receiver


#include <esp_now.h>
#include <WiFi.h>



// GPIO where LED is connected to
const int ledpin =  2;
const int rfmotor = 4;
const int rbmotor = 16;
const int lfmotor = 17;
const int lbmotor = 5;

void receive_sig ()
{
  digitalWrite(ledpin, HIGH);
  delay(100);
  digitalWrite(ledpin, LOW);
  delay(100);
}

void forward()
{
  digitalWrite(rfmotor, HIGH);
  digitalWrite(lfmotor, HIGH);
  digitalWrite(rbmotor, LOW);
  digitalWrite(lbmotor, LOW);
  Serial.println("Forward");
}


void backward()
{
  digitalWrite(rfmotor, LOW);
  digitalWrite(lfmotor, LOW);
  digitalWrite(rbmotor, HIGH);
  digitalWrite(lbmotor, HIGH);
  Serial.println("Backward");
}


void right()
{
  digitalWrite(rfmotor, HIGH);
  digitalWrite(lfmotor, LOW);
  digitalWrite(rbmotor, LOW);
  digitalWrite(lbmotor, HIGH);
  Serial.println("Right");
}


void left()
{
  digitalWrite(rfmotor, LOW);
  digitalWrite(lfmotor, HIGH);
  digitalWrite(rbmotor, HIGH);
  digitalWrite(lbmotor, LOW);
  Serial.println("Left");
}


void stopp()
{
  digitalWrite(rfmotor, LOW);
  digitalWrite(lfmotor, LOW);
  digitalWrite(rbmotor, LOW);
  digitalWrite(lbmotor, LOW);
  Serial.println("Stop");
}


// Structure example to receive data
// Must match the sender structure
typedef struct struct_message {
  char a;
  //  char b;
  //  char c;
  //  char d;
} struct_message;

// Create a struct_message called myData
struct_message myData;

// callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&myData, incomingData, sizeof(myData));
  Serial.print("Bytes received: ");
  Serial.println(len);
  Serial.print("A: ");
  Serial.println(myData.a);
  //  Serial.print("B: ");
  //  Serial.println(myData.b);
  //  Serial.print("C: ");
  //  Serial.println(myData.c);
  //  Serial.print("D: ");
  //  Serial.println(myData.d);
  //  Serial.println();
  Serial.flush();
  delay(10);
}

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  pinMode(ledpin, OUTPUT);
  pinMode(rfmotor, OUTPUT);
  pinMode(rbmotor, OUTPUT);
  pinMode(lfmotor, OUTPUT);
  pinMode(lbmotor, OUTPUT);
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_register_recv_cb(OnDataRecv);

  stopp();
}




void loop() {

  Serial.println(WiFi.RSSI());
  char message = myData.a;
  switch (message)
  {
    case 'F' :
      forward();
      receive_sig ();
      break ;

    case 'B' :
      backward();
      receive_sig ();
      break ;


    case 'R' :
      right();
      receive_sig ();
      break ;

    case 'L' :
      left();
      receive_sig ();
      break ;

    case 'S' :
      stopp();
      receive_sig ();
      break ;





  }
}

